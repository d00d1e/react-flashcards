{"version":3,"sources":["components/Flashcard.js","components/FlashcardList.js","App.js","index.js"],"names":["Flashcard","flashcard","useState","flip","setFlip","height","setHeight","frontElement","useRef","backElement","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","Math","max","useEffect","question","answer","options","window","addEventListener","removeEventListener","className","style","onClick","ref","map","option","key","FlashcardList","flashcards","id","App","setFlashCards","categories","setCategories","categoryElement","amountElement","decodeString","str","textArea","document","createElement","innerHTML","value","axios","get","then","res","data","trivia_categories","onSubmit","e","preventDefault","params","amount","category","results","questionItem","index","correct_answer","incorrect_answers","a","Date","now","sort","random","htmlFor","name","type","min","step","defaultValue","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d832ad2a.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nexport default function Flashcard({ flashcard }) {\n  const [flip, setFlip] = useState(false);\n  \n  // for varying card heights\n  const [height, setHeight] = useState('initial ');\n  const frontElement = useRef();\n  const backElement = useRef();\n\n  function setMaxHeight() {\n    // give dimensions of rectangle \n    const frontHeight = frontElement.current.getBoundingClientRect().height;\n    const backHeight = backElement.current.getBoundingClientRect().height;\n    setHeight(Math.max(frontHeight, backHeight, 100));\n  }\n\n  useEffect(setMaxHeight, [flashcard.question, flashcard.answer, flashcard.options]);\n  \n  // recalc height everyntime page size changes\n  useEffect(() => {\n    window.addEventListener('resize', setMaxHeight)\n    return () => window.removeEventListener('resize', setMaxHeight)\n  }, [])\n\n  return (\n    <div \n      className={`card ${flip ? 'flip' : ''}`}\n      style={{height: height}}\n      onClick={() => setFlip(!flip)}\n    >\n      <div className=\"front\" ref={frontElement}>\n        {flashcard.question}\n        <div className=\"flashcard-options\">\n          {flashcard.options.map(option => {\n            return <div className=\"flashcard-option\" key={option}>{option}</div>\n          })}\n        </div>\n      </div>\n      <div className=\"back\" ref={backElement}>{flashcard.answer}</div>\n      {/* {flip ? flashcard.answer : flashcard.question} */}\n    </div>\n  )\n}","import React from 'react';\nimport Flashcard from './Flashcard'\n\nexport default function FlashcardList({ flashcards }) {\n  return (\n    <div className=\"card-grid\">\n      {flashcards.map(flashcard => {\n        return <Flashcard key={flashcard.id} flashcard={flashcard}/>\n      })}\n    </div>\n  )\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nimport FlashcardList from './components/FlashcardList';\nimport './App.css';\n\nfunction App() {\n  const [flashcards, setFlashCards] = useState([]);\n  const [categories, setCategories] = useState([]);\n\n  const categoryElement = useRef();\n  const amountElement = useRef();\n\n  useEffect(() => {\n    axios\n      .get('https://opentdb.com/api_category.php')\n      .then(res => {\n        setCategories(res.data.trivia_categories);\n      })\n  });\n\n  // convert html encoded str to normal str\n  function decodeString(str) {\n    const textArea = document.createElement('textarea');\n    textArea.innerHTML = str;\n    return textArea.value\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    axios\n      .get('https://opentdb.com/api.php', {\n        // custom params\n        params: {\n          amount: amountElement.current.value,\n          category: categoryElement.current.value\n        }\n      })\n      .then(res => {\n        setFlashCards(res.data.results.map((questionItem, index) => {\n          const answer = questionItem.correct_answer;\n          const options = [\n            ...questionItem.incorrect_answers.map(a => decodeString(a)), \n            answer\n          ];\n\n          return {\n            id: `${index}-${Date.now()}`,\n            question: decodeString(questionItem.question),\n            answer: decodeString(questionItem.correct_answer),\n            options: options.sort(() => Math.random() - 0.5) \n          }\n        }))\n      })\n  }\n\n  return (\n    <>\n      <form className=\"header\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"category\">Category </label>\n          <select id=\"category\" ref={categoryElement}>\n            {categories.map(category => {\n              return <option value={category.id} key={category.id}>{category.name}</option>\n            })}\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">Number of Questions </label>\n          <input type=\"number\" id=\"amount\" min=\"1\" step=\"1\" defaultValue={10} ref={amountElement}/>\n        </div>\n        <div className=\"form-group\">\n          <button className=\"btn\">Generate</button>\n        </div>\n      </form>\n      <div className=\"container\">\n        <FlashcardList flashcards={flashcards} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}